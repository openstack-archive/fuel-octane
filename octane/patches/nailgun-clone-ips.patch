diff --git a/nailgun/nailgun/extensions/cluster_upgrade/extension.py b/nailgun/nailgun/extensions/cluster_upgrade/extension.py
index d83df48..1984234 100644
--- extension.py
+++ extension.py
@@ -30,6 +30,8 @@ class ClusterUpgradeExtension(extensions.BaseExtension):
          'handler': handlers.ClusterUpgradeHandler},
         {'uri': r'/clusters/(?P<cluster_id>\d+)/upgrade/assign/?$',
          'handler': handlers.NodeReassignHandler},
+        {'uri': r'/clusters/(?P<cluster_id>\d+)/upgrade/clone_ips/?$',
+         'handler': handlers.ClusterCloneIPsHandler},
     ]

     @classmethod
diff --git a/nailgun/nailgun/extensions/cluster_upgrade/handlers.py b/nailgun/nailgun/extensions/cluster_upgrade/handlers.py
index 1ef1ae1..976e0ae 100644
--- handlers.py
+++ handlers.py
@@ -88,3 +88,30 @@ class NodeReassignHandler(base.BaseHandler):
         upgrade.UpgradeHelper.assign_node_to_cluster(node, cluster)

         self.handle_task(cluster_id, [node.node, ])
+
+
+class ClusterCloneIPsHandler(base.BaseHandler):
+    single = objects.Cluster
+    validator = validators.ClusterCloneIPsValidator
+
+    @base.content
+    def POST(self, cluster_id):
+        """Initialize the clone of IPs
+
+        Set IPs and hostnames to new controllers for all networks except admin
+        according controllers from original cluster.
+
+        :param cluster_id: ID of the original cluster which controllers IPs
+                           would be cloned
+        :returns: None
+        :http: * 200 (OK)
+               * 400 (clone parameters are invalid)
+               * 404 (cluster not found in db)
+        """
+        from . import upgrade
+
+        seed_cluster_id, networks = self.checked_data(
+            orig_cluster_id=cluster_id)
+
+        upgrade.UpgradeHelper.copy_controllers_ips_and_hostnames(
+            cluster_id, seed_cluster_id, networks)
diff --git a/nailgun/nailgun/extensions/cluster_upgrade/objects/adapters.py b/nailgun/nailgun/extensions/cluster_upgrade/objects/adapters.py
index 3e107bd..16e4d35 100644
--- objects/adapters.py
+++ objects/adapters.py
@@ -69,6 +69,9 @@ class NailgunClusterAdapter(object):
     def to_json(self):
         return objects.Cluster.to_json(self.cluster)

+    def get_nodes_by_role(self, role):
+        return objects.Cluster.get_nodes_by_role(self.cluster, role)
+
     @classmethod
     def get_by_uid(cls, cluster_id):
         cluster = objects.Cluster.get_by_uid(cluster_id)
@@ -139,6 +142,15 @@ class NailgunNetworkManager(object):
         return self.net_manager.set_bond_assignment_netgroups_ids(
             node.node, mapping)

+    def get_node_networks_ips(self, node):
+        return self.net_manager.get_node_networks_ips(node)
+
+    def set_node_networks_ips(self, node, ips_by_network_name):
+        self.net_manager.set_node_networks_ips(node, ips_by_network_name)
+
+    def clear_assigned_ips(self, node):
+        return self.net_manager.clear_assigned_ips(node)
+

 class NailgunNodeAdapter(object):

diff --git a/nailgun/nailgun/extensions/cluster_upgrade/upgrade.py b/nailgun/nailgun/extensions/cluster_upgrade/upgrade.py
index 5416463..f9ede88 100644
--- upgrade.py
+++ upgrade.py
@@ -196,3 +196,63 @@ class UpgradeHelper(object):
         mapping[orig_cluster.get_admin_network_group().id] = \
             seed_cluster.get_admin_network_group().id
         return mapping
+
+    @classmethod
+    def copy_controllers_ips_and_hostnames(cls, orig_cluster_id,
+                                           seed_cluster_id, networks=None):
+        """Controllers from original and seed clusters are
+           matches by set of network names and then IPs from
+           original controllers are copied to seed controllers.
+           IPs are copied only for networks from `networks`, all
+           Ips are copied exclude web_admin in case networks empty
+        """
+        seed_cluster = adapters.NailgunClusterAdapter.get_by_uid(
+            seed_cluster_id)
+        orig_cluster = adapters.NailgunClusterAdapter.get_by_uid(
+            orig_cluster_id)
+
+        seed_controllers = seed_cluster.get_nodes_by_role('controller')
+        orig_controllers = orig_cluster.get_nodes_by_role('controller')
+
+        seed_manager = seed_cluster.get_network_manager()
+        orig_manager = orig_cluster.get_network_manager()
+
+        # Need to allocate ips for seed controllers
+        from nailgun.objects import node as node_obj
+        for node in seed_controllers:
+            seed_manager.clear_assigned_ips(node)
+        node_obj.NodeCollection.prepare_for_deployment(seed_controllers)
+
+        node_by_net_names = collections.defaultdict(list)
+        nets_ips_by_node = collections.defaultdict(dict)
+
+        # controller nodes will be mapped by set of network group names
+        for orig_node in orig_controllers:
+            orig_node_adapter = adapters.NailgunNodeAdapter(orig_node)
+            ips_by_network_name = orig_manager.get_node_networks_ips(
+                orig_node)
+            ips_by_network_name.pop(consts.NETWORKS.fuelweb_admin, None)
+            nets_ips_by_node[orig_node_adapter] = ips_by_network_name
+            net_names = tuple(sorted(ips_by_network_name))
+            node_by_net_names[net_names].append(orig_node_adapter)
+
+        for seed_node in seed_controllers:
+            seed_node_adapter = adapters.NailgunNodeAdapter(seed_node)
+            ips_by_network_name = seed_manager.get_node_networks_ips(
+                seed_node)
+            ips_by_network_name.pop(consts.NETWORKS.fuelweb_admin, None)
+            net_names = tuple(sorted(ips_by_network_name))
+
+            if net_names not in node_by_net_names:
+                continue
+            orig_node_adapter = node_by_net_names[net_names].pop()
+
+            seed_node_adapter.hostname = orig_node_adapter.hostname
+            ips_mapping = nets_ips_by_node[orig_node_adapter]
+            if networks:
+                ips_mapping = {}
+                for net in networks:
+                    if net in nets_ips_by_node[orig_node_adapter]:
+                        ips_mapping[net] = nets_ips_by_node[
+                            orig_node_adapter][net]
+            seed_manager.set_node_networks_ips(seed_node, ips_mapping)
diff --git a/nailgun/nailgun/extensions/cluster_upgrade/validators.py b/nailgun/nailgun/extensions/cluster_upgrade/validators.py
index a86201c..b4b41d7 100644
--- validators.py
+++ validators.py
@@ -135,3 +135,59 @@ class NodeReassignValidator(base.BasicValidator):
             raise errors.InvalidData("Node {0} is already assigned to cluster"
                                      " {1}".format(node.id, cluster.id),
                                      log_message=True)
+
+
+class ClusterCloneIPsValidator(base.BasicValidator):
+    schema = {
+        "$schema": "http://json-schema.org/draft-04/schema#",
+        "title": "Clone IPs Parameters",
+        "description": "Serialized parameters to clone IPs",
+        "type": "object",
+        "properties": {
+            "networks": {
+                "type": "array",
+                "items": {"type": "string"}
+            }
+        },
+        "required": ["networks"]
+    }
+
+    @classmethod
+    def validate(cls, data, orig_cluster_id):
+        data = super(ClusterCloneIPsValidator, cls).validate(data)
+        cls.validate_schema(data, cls.schema)
+        seed_cluster_id = cls.validate_orig_cluster(orig_cluster_id)
+        cls.validate_controllers_amount(seed_cluster_id)
+
+        return seed_cluster_id, data['networks']
+
+    @classmethod
+    def validate_orig_cluster(cls, orig_cluster_id):
+        from .objects.relations import UpgradeRelationObject
+        relation = UpgradeRelationObject.get_cluster_relation(
+            orig_cluster_id)
+
+        if not relation:
+            raise errors.InvalidData(
+                "Cluster with ID {0} is not in upgrade stage."
+                .format(orig_cluster_id),
+                log_message=True)
+
+        if relation.orig_cluster_id != int(orig_cluster_id):
+            raise errors.InvalidData(
+                "There is no original cluster with ID {0}."
+                .format(orig_cluster_id),
+                log_message=True)
+
+        return relation.seed_cluster_id
+
+    @classmethod
+    def validate_controllers_amount(cls, seed_cluster_id):
+        seed_cluster = adapters.NailgunClusterAdapter.get_by_uid(
+            seed_cluster_id)
+        seed_controllers = adapters.NailgunClusterAdapter.get_nodes_by_role(
+            seed_cluster, 'controller')
+
+        if len(seed_controllers) == 0:
+            raise errors.InvalidData("Seed cluster should has at least"
+                                     " one controller", log_message=True)
