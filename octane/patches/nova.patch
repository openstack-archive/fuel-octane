diff --git a/nova/cmd/manage.py b/nova/cmd/manage.py
index 380c9b5..9e9c4d0 100644
--- a/nova/cmd/manage.py
+++ b/nova/cmd/manage.py
@@ -981,6 +981,24 @@
             print(_('There were no records found where '
                     'instance_uuid was NULL.'))

+    @args('--max-number', metavar='<number>', dest='max_number',
+          help='Maximum number of instances to consider')
+    @args('--force', action='store_true', dest='force',
+          help='Force instances to migrate (even if they may be performing '
+               'another operation). Warning, this is potentially dangerous.')
+    def migrate_flavor_data(self, max_number=None, force=False):
+        if max_number is not None:
+            max_number = int(max_number)
+            if max_number < 0:
+                print(_('Must supply a positive value for max_number'))
+                return(1)
+        admin_context = context.get_admin_context()
+        flavor_cache = {}
+        match, done = db.migrate_flavor_data(admin_context, max_number,
+                                             flavor_cache, force)
+        print(_('%(total)i instances matched query, %(done)i completed') %
+              {'total': match, 'done': done})
+

 class ApiDbCommands(object):
     """Class for managing the api database."""
diff --git a/nova/db/api.py b/nova/db/api.py
index d00aa1e..aaf2054 100644
--- a/nova/db/api.py
+++ b/nova/db/api.py
@@ -1908,6 +1908,21 @@
                                                max_rows=max_rows)


+def migrate_flavor_data(context, max_count, flavor_cache, force=False):
+    """Migrate instance flavor data from system_metadata to instance_extra.
+
+    :param max_count: The maximum number of instances to consider in this
+                      run.
+    :param flavor_cache: A dict to persist flavor information in across
+                         calls (just pass an empty dict here)
+    :param force: Boolean whether or not to force migration of instances that
+                  are performing another operation.
+    :returns: number of instances needing migration, number of instances
+              migrated (both will always be less than max_count)
+    """
+    return IMPL.migrate_flavor_data(context, max_count, flavor_cache, force)
+
+
 ####################


diff --git a/nova/db/sqlalchemy/api.py b/nova/db/sqlalchemy/api.py
index bee083e..808592a 100644
--- a/nova/db/sqlalchemy/api.py
+++ b/nova/db/sqlalchemy/api.py
@@ -6051,6 +6051,133 @@
     return rows_archived


+def _augment_flavor_to_migrate(flavor_to_migrate, full_flavor):
+    """Make sure that extra_specs on the flavor to migrate is updated."""
+    if not flavor_to_migrate.obj_attr_is_set('extra_specs'):
+        flavor_to_migrate.extra_specs = {}
+    for key in full_flavor['extra_specs']:
+        if key not in flavor_to_migrate.extra_specs:
+            flavor_to_migrate.extra_specs[key] = \
+                    full_flavor.extra_specs[key]
+
+
+def _augment_flavors_to_migrate(instance, flavor_cache):
+    """Add extra_specs to instance flavors.
+
+    :param instance: Instance to be mined
+    :param flavor_cache:  Dict to persist flavors we look up from the DB
+    """
+
+    # NOTE(danms): Avoid circular import
+    from nova import objects
+
+    deleted_ctx = instance._context.elevated(read_deleted='yes')
+
+    for flavorprop in ['flavor', 'old_flavor', 'new_flavor']:
+        flavor = getattr(instance, flavorprop)
+        if flavor is None:
+            continue
+        flavorid = flavor.flavorid
+        if flavorid not in flavor_cache:
+            try:
+                flavor_cache[flavorid] = objects.Flavor.get_by_flavor_id(
+                    deleted_ctx, flavorid)
+            except exception.FlavorNotFound:
+                LOG.warn(_LW('Flavor %(flavorid)s not found for instance '
+                             'during migration; extra_specs will not be '
+                             'available'),
+                         {'flavorid': flavorid}, instance=instance)
+                continue
+        _augment_flavor_to_migrate(flavor, flavor_cache[flavorid])
+
+
+def _load_missing_flavor(instance, flavor_cache):
+    # NOTE(danms): Avoid circular import
+    from nova import objects
+
+    instance_type_id = instance.instance_type_id
+    if not instance_type_id:
+        instance_type_id = instance.system_metadata.get(
+            'instance_type_id', None)
+    deleted_ctx = instance._context.elevated(read_deleted='yes')
+
+    flavor_cache_by_id = {flavor.id: flavor
+                          for flavor in flavor_cache.values()}
+    if instance.instance_type_id in flavor_cache_by_id:
+        instance.flavor = flavor_cache_by_id[instance_type_id]
+    else:
+        instance.flavor = objects.Flavor.get_by_id(deleted_ctx,
+                                                   instance_type_id)
+        flavor_cache[instance.flavor.flavorid] = instance.flavor
+    instance.old_flavor = None
+    instance.new_flavor = None
+
+
+def migrate_flavor_data(context, max_count, flavor_cache, force=False):
+    nova.context.require_admin_context(context)
+    # NOTE(danms): This is only ever run in nova-manage, and we need to avoid
+    # a circular import
+    from nova import objects
+    from nova.db.sqlalchemy import models
+
+    query = _instance_get_all_query(context, joins=['extra', 'extra.flavor']).\
+                outerjoin(models.Instance.extra).\
+                filter(models.InstanceExtra.flavor.is_(None))
+    if max_count is not None:
+        instances = query.limit(max_count)
+    else:
+        instances = query.all()
+
+    instances = _instances_fill_metadata(context, instances,
+                                         manual_joins=['system_metadata'])
+
+    count_all = 0
+    count_hit = 0
+    for db_instance in instances:
+        count_all += 1
+        instance = objects.Instance._from_db_object(
+            context, objects.Instance(), db_instance,
+            expected_attrs=['system_metadata', 'flavor'])
+        # NOTE(danms): Don't touch instances that are likely in the
+        # middle of some other operation. This is just a guess and not
+        # a lock. There is still a race here, although it's the same
+        # race as the normal code, since we use expected_task_state below.
+        if not force:
+            if instance.task_state is not None:
+                continue
+            if instance.vm_state in [vm_states.RESCUED, vm_states.RESIZED]:
+                continue
+
+        # NOTE(danms): If we have a really old instance with no flavor
+        # information at all, flavor will not have been set during load.
+        # If that's the case, look up the flavor by id (which implies that
+        # old_ and new_flavor are None). No need to augment with extra_specs
+        # since we're doing the lookup from scratch.
+        if not instance.obj_attr_is_set('flavor'):
+            try:
+                _load_missing_flavor(instance, flavor_cache)
+            except exception.FlavorNotFound:
+                LOG.error(_LE('Unable to lookup flavor for legacy instance; '
+                              'migration is not possible without manual '
+                              'intervention'),
+                          instance=instance)
+                continue
+        else:
+            _augment_flavors_to_migrate(instance, flavor_cache)
+        if instance.obj_what_changed():
+            if db_instance.get('extra') is None:
+                _instance_extra_create(context,
+                                       {'instance_uuid': db_instance['uuid']})
+                LOG.debug(
+                    'Created instance_extra for %s' % db_instance['uuid'])
+            instance.save(expected_task_state=[instance.task_state],
+                          expected_vm_state=[instance.vm_state])
+            count_hit += 1
+        model_query(context, models.InstanceSystemMetadata).filter_by(key="instance_type_id").soft_delete()
+
+    return count_all, count_hit
+
+
 ####################
